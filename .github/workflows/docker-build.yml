name: Build Docker Image
permissions:
  contents: read
  packages: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build (e.g., v0.1.3)"
        required: true
        default: "v0.1.3"

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List releases
        run: |
          echo "Checking for release: ${{ github.event.inputs.version }}"
          gh release list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download musl binary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseTag = '${{ github.event.inputs.version }}';
            if (!releaseTag) {
              throw new Error('Release tag is empty');
            }

            const fileName = `shoes-${releaseTag}-x86_64-unknown-linux-musl`;
            console.log(`Searching for asset: ${fileName}`);

            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: releaseTag
              });

              const asset = release.data.assets.find(asset => asset.name === fileName);
              if (!asset) {
                throw new Error(`Asset ${fileName} not found in release`);
              }

              console.log(`Downloading asset from: ${asset.browser_download_url}`);
              const response = await fetch(asset.browser_download_url);
              if (!response.ok) {
                throw new Error(`Failed to download asset: ${response.statusText}`);
              }

              const buffer = await response.arrayBuffer();
              fs.writeFileSync('shoes', new Uint8Array(buffer));

              await exec.exec('chmod', ['+x', 'shoes']);
            } catch (error) {
              console.error('Error details:', error);
              throw error;
            }

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            APP_VERSION=${{ github.event.inputs.version }}
            BINARY_NAME=shoes
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.event.inputs.version }}
