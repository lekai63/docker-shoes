name: Build Linux Binary
permissions:
  contents: write
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build (e.g., v0.1.3)"
        required: true
        default: "v0.1.3"

env:
  CARGO_TERM_COLOR: always
  # 如果是手动触发就用输入的版本,否则使用默认版本
  APP_VERSION: ${{ github.event.inputs.version || 'v0.1.3' }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]

    steps:
      - name: Checkout shoes repository
        uses: actions/checkout@v4
        with:
          repository: cfal/shoes
          ref: ${{ env.APP_VERSION }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - uses: Swatinem/rust-cache@v2

      - name: Build Release Binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Rename binary for release
        run: |
          cp target/${{ matrix.target }}/release/shoes shoes-${{ env.APP_VERSION }}-${{ matrix.target }}

      - name: Create Tag
        run: |
          git tag ${{ env.APP_VERSION }} || true
          git push origin ${{ env.APP_VERSION }} || true

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          files: shoes-${{ env.APP_VERSION }}-${{ matrix.target }}
          tag_name: ${{ env.APP_VERSION }}
          name: Release ${{ env.APP_VERSION }}
          body: "Linux binary build"
          draft: false
          prerelease: false
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download musl binary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseTag = process.env.APP_VERSION;
            const fileName = `shoes-${releaseTag}-x86_64-unknown-linux-musl`;

            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: releaseTag
            });

            const asset = release.data.assets.find(asset => asset.name === fileName);
            if (!asset) throw new Error(`Asset ${fileName} not found`);

            const response = await fetch(asset.browser_download_url);
            const buffer = await response.arrayBuffer();
            fs.writeFileSync('shoes', new Uint8Array(buffer));

            await exec.exec('chmod', ['+x', 'shoes']);

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            APP_VERSION=${{ env.APP_VERSION }}
            BINARY_NAME=shoes
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ env.APP_VERSION }}
